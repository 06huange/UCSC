head	1.6;
access;
symbols;
locks;
comment	@# @;


1.6
date	2020.09.06.18.23.57;	author -;	state -;
branches;
next	1.5;

1.5
date	2020.09.06.18.23.32;	author -;	state -;
branches;
next	1.4;

1.4
date	2020.07.28.00.25.40;	author -;	state -;
branches;
next	1.3;

1.3
date	2020.07.28.00.16.13;	author -;	state -;
branches;
next	1.2;

1.2
date	2020.07.28.00.12.49;	author -;	state -;
branches;
next	1.1;

1.1
date	2020.07.28.00.07.49;	author -;	state -;
branches;
next	;


desc
@@


1.6
log
@-
@
text
@#!/afs/cats.ucsc.edu/courses/cse112-wm/usr/racket/bin/mzscheme -qr
;; $Id: euler.scm,v 1.5 2020-09-06 11:23:32-07 - - $

(define i (sqrt -1))
(define pi (acos -1))

(define euler-exp '(lambda (x) (exp (* i x))))
(define euler-trig '(lambda (x) (+ (cos x) (* i (sin x)))))

(define (show expr)
    (printf "~s = ~s~n"  expr (eval expr)))

(show 'i)
(show 'pi)

(show 'euler-exp)
(show 'euler-trig)

(show '((eval euler-exp) pi))
(show '((eval euler-trig) pi))
(show '(- ((eval euler-exp) pi) ((eval euler-trig) pi)))

(show '((eval euler-exp) 0))
(show '((eval euler-trig) 0))
(show '(- ((eval euler-exp) 0) ((eval euler-trig) 0)))

(define (digits fraction)
    (let ((sum (+ 1 fraction)))
         (show `(+ 1 ,fraction))
         (when (> sum 1) (digits (/ fraction 10)))))

(printf "~nWhat is epsilon?~n")
(digits 0.0000001)

@


1.5
log
@-
@
text
@d2 1
a2 1
;; $Id: euler.scm,v 1.4 2020-07-27 17:25:40-07 - - $
d32 1
a32 1
(printf "~nWhat is epsilon?~n)
@


1.4
log
@-
@
text
@d2 1
a2 1
;; $Id: euler.scm,v 1.3 2020-07-27 17:16:13-07 - - $
d11 1
a11 4
    (display expr)
    (display " = ")
    (display (eval expr))
    (newline))
d21 1
d25 1
d32 1
@


1.3
log
@-
@
text
@d2 1
a2 1
;; $Id: euler.scm,v 1.2 2020-07-27 17:12:49-07 - - $
d24 10
@


1.2
log
@-
@
text
@d2 1
a2 1
;; $Id: euler.scm,v 1.1 2020-07-27 17:07:49-07 - - $
d22 2
a23 2
(show '(apply (eval euler-exp) pi))
(show '(apply (eval euler-trig) pi))
@


1.1
log
@-
@
text
@d2 1
a2 1
;; $Id: e-i-pi.scm,v 1.3 2020-07-27 17:02:16-07 - - $
d7 2
a8 2
(define (euler-exp x) (exp (* i x)))
(define (euler-trig x) (+ (cos x) (* i (sin x))))
d19 5
a23 2
(show '(euler-exp pi))
(show '(euler-trig pi))
@
