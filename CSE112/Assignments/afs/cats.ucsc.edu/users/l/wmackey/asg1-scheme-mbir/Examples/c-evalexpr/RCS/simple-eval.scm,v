head	1.3;
access;
symbols;
locks;
comment	@# @;


1.3
date	2021.04.02.04.08.36;	author -;	state -;
branches;
next	1.2;

1.2
date	2021.04.02.04.08.02;	author -;	state -;
branches;
next	1.1;

1.1
date	2021.04.01.05.29.46;	author -;	state -;
branches;
next	;


desc
@@


1.3
log
@-
@
text
@#!/afs/cats.ucsc.edu/courses/cse112-wm/usr/racket/bin/mzscheme -qr
;; $Id: simple-eval.scm,v 1.2 2021-04-01 21:08:02-07 - - $

(define (eval-expr expr)
    (if (number? expr) (+ expr 0.0)
        (apply (car expr)
               (map eval-expr (cdr expr)))))

(define (print-eval expr)
    (printf "~s~n= ~s~n" expr (eval-expr expr)))

(print-eval 3)
(print-eval `(,/ 1 0))
(print-eval `(,+ 4.14 2.71))
(print-eval `(,sqrt -1))
(print-eval `(,+ (,* 2 3) (,* 4 5)))
(print-eval `(,* (,+ 8 3) (,+ (,* 2 9) 6)))

@


1.2
log
@-
@
text
@d2 1
a2 1
;; $Id: simple-eval.scm,v 1.1 2021-03-31 22:29:46-07 - - $
d10 1
a10 1
    (printf "~s~n= ~s~n~n" expr (eval-expr expr)))
d13 1
a13 1

a14 1

a15 1

a16 1

@


1.1
log
@-
@
text
@d2 1
a2 1
;; $Id: simple-eval.scm,v 1.6 2021-01-12 19:34:27-08 - - $
d4 1
a4 1
(define (eval expr)
d7 1
a7 1
               (map eval (cdr expr)))))
d10 1
a10 1
    (printf "~s~n= ~s~n~n" expr (eval expr)))
@
