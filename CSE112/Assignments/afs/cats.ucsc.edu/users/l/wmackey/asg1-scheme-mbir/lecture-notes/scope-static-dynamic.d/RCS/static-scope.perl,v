head	1.6;
access;
symbols;
locks;
comment	@# @;


1.6
date	2021.03.04.19.08.12;	author -;	state -;
branches;
next	1.5;

1.5
date	2021.03.04.18.48.00;	author -;	state -;
branches;
next	1.4;

1.4
date	2021.03.04.18.47.02;	author -;	state -;
branches;
next	1.3;

1.3
date	2021.03.04.18.46.20;	author -;	state -;
branches;
next	1.2;

1.2
date	2021.03.04.02.46.49;	author -;	state -;
branches;
next	1.1;

1.1
date	2021.03.04.02.15.41;	author -;	state -;
branches;
next	;


desc
@@


1.6
log
@-
@
text
@#!/usr/bin/perl
# $Id: static-scope.perl,v 1.5 2021-03-04 10:48:00-08 - - $

# Perl program with static scoping.

use strict;

sub display {
   my ($line, $xx, $yy) = @@_;
   my @@callers;
   for (my $i = 1;; ++$i) {
      my @@call = caller ($i);
      last unless @@call;
      $call[3] =~ s/main:://;
      unshift @@callers, "$call[3]($call[2])";
   }
   print "Line $line x=$xx, y=$yy :@@callers\n";
}

my $x = 1;
my $y = 2;

sub foo {
   display __LINE__, $x, $y;
   my $x = 3;
   display __LINE__, $x, $y;
   {
      my $y = 4;
      display __LINE__, $x, $y;
   }
   display __LINE__, $x, $y;
}

sub bar {
   display __LINE__, $x, $y;
   my $y = 5;
   display __LINE__, $x, $y;
   foo();
   display __LINE__, $x, $y;
}

sub main {
   display __LINE__, $x, $y;
   my $x = 6;
   display __LINE__, $x, $y;
   bar();
   display __LINE__, $x, $y;
}

display __LINE__, $x, $y;
main();
display __LINE__, $x, $y;

@


1.5
log
@-
@
text
@d2 1
a2 1
# $Id: static-scope.perl,v 1.4 2021-03-04 10:47:02-08 - - $
d10 8
a17 3
   my @@caller = caller (1);
   $caller[3] =~ s/main::/$1/;
   print "$caller[3]: $line x=$xx, y=$yy\n";
@


1.4
log
@-
@
text
@d2 1
a2 1
# $Id: static-scope.perl,v 1.3 2021-03-04 10:46:20-08 - - $
d11 1
a11 1
   $caller[3] =~ s/main/$1/;
@


1.3
log
@-
@
text
@d2 1
a2 1
# $Id: static-scope.perl,v 1.2 2021-03-03 18:46:49-08 - - $
d11 1
a11 1
   $caller[3] =~ s/main::(.*)/$1/;
@


1.2
log
@-
@
text
@d2 1
a2 1
# $Id: static-scope.perl,v 1.1 2021-03-03 18:15:41-08 - - $
d11 1
a11 1
   $caller[3] =~ s/main::(.*)/$1()/;
@


1.1
log
@-
@
text
@d2 1
a2 1
# $Id$
d8 1
a8 1
sub print {
d10 3
a12 1
   print "Line $line, x=$x, y=$y\n";
d19 1
a19 1
   print __LINE__, x, y;
d21 1
a21 1
   print __LINE__, x, y;
d24 1
a24 1
      print __LINE__, x, y;
d26 1
a26 1
   print __LINE__, x, y;
d30 1
a30 1
   print __LINE__, x, y;
d32 1
a32 1
   print __LINE__, x, y;
d34 1
a34 1
   print __LINE__, x, y;
d38 1
a38 1
   print __LINE__, x, y;
d40 1
a40 1
   print __LINE__, x, y;
d42 1
a42 1
   print __LINE__, x, y;
d45 1
a45 1
print __LINE__, x, y;
d47 1
a47 1
print __LINE__, x, y;
@
