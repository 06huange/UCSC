head	1.7;
access;
symbols;
locks;
comment	@; @;


1.7
date	2021.04.30.03.10.59;	author -;	state -;
branches;
next	1.6;

1.6
date	2021.04.30.02.34.07;	author -;	state -;
branches;
next	1.5;

1.5
date	2021.04.29.18.51.55;	author -;	state -;
branches;
next	1.4;

1.4
date	2021.04.29.18.45.01;	author -;	state -;
branches;
next	1.3;

1.3
date	2021.04.29.18.29.19;	author -;	state -;
branches;
next	1.2;

1.2
date	2021.04.28.23.32.46;	author -;	state -;
branches;
next	1.1;

1.1
date	2021.04.28.23.18.36;	author -;	state -;
branches;
next	;


desc
@@


1.7
log
@-
@
text
@
(* $Id: p3-foldl.ml,v 1.6 2021-04-29 19:34:07-07 - - $ *)

let compose f g x = f (g x);;
let swap f x y = f y x;;
let cons a d = a::d;;

let even x = x mod 2 = 0;;
let odd = compose not even;;

let rec foldl fn unit list = match list with
    | [] -> unit
    | car::cdr -> foldl fn (fn unit car) cdr

let sum_rec list = 
    let rec sum lis acc = match lis with
        | [] -> acc
        | x::xs -> sum xs (acc + x)
    in  sum list 0;;

let sum_fold = foldl (+) 0;;
 
let rec len_rec list =
    let rec len lis acc = match lis with
        | [] -> acc
        | _::xs -> len xs (acc + 1)
    in  len list 0;;

let len_fold = foldl (fun u _ -> u + 1) 0;;

let reduce f list = match list with
    | [] -> failwith "reduce"
    | x::xs -> foldl f x xs;;

let reduce_opt f list = match list with
    | [] -> None
    | x::xs -> Some (foldl f x xs);;

let min x y = if x < y then x else y;;

let minlist list = reduce min list;;

let minlist_opt list = reduce min list;;

let reverse_rec list = 
    let rec rev lis accum = match lis with
        | [] -> accum
        | x::xs -> rev xs (x::accum)
    in rev list [];;

let reverse_fold = foldl (swap cons) [];;

let rec member_rec item list = match list with
    | [] -> false
    | x::_ when x = item -> true
    | _::xs -> member_rec item xs;;

let member_fold item =
    foldl (fun found x -> found || found = x) false;;

@


1.6
log
@-
@
text
@d2 1
a2 1
(* $Id: p3-foldl.ml,v 1.5 2021-04-29 11:51:55-07 - - $ *)
d55 1
a55 1
    | x::xs when x = item -> true
@


1.5
log
@-
@
text
@d2 1
a2 1
(* $Id: p3-foldl.ml,v 1.4 2021-04-29 11:45:01-07 - - $ *)
d17 1
a17 1
        | [] -> 0
d25 1
a25 1
        | [] -> 0
@


1.4
log
@-
@
text
@d2 1
a2 1
(* $Id: p3-foldl.ml,v 1.3 2021-04-29 11:29:19-07 - - $ *)
d32 1
a32 1
    | [] -> raise (Invalid_argument "reduce")
d53 1
a53 1
let member_rec item list = match list with
@


1.3
log
@-
@
text
@d2 1
a2 1
(* $Id: p3-foldl.ml,v 1.2 2021-04-28 16:32:46-07 - - $ *)
d4 6
d51 6
a56 1
let reverse_fold = foldl (fun t h -> h::t) [];;
d58 2
@


1.2
log
@-
@
text
@d2 1
a2 1
(* $Id: p3-foldl.ml,v 1.1 2021-04-28 16:18:36-07 - - $ *)
d9 13
d23 1
a23 9
let rec foldl2 fn unit list1 list2 = match list1, list2 with
    | [], [] -> unit
    | car1::cdr1, car2::cdr2 -> foldl2 fn (fn unit car1 car2) cdr1 cdr2
    | _, _ -> raise (Invalid_argument "foldl2")


let sum = foldl (+) 0;;

let len = foldl (fun u _ -> u + 1) 0;;
d39 1
a39 1
let reverse1 list = 
d45 1
a45 1
let reverse2 = foldl (fun t h -> h::t) [];;
@


1.1
log
@-
@
text
@d2 1
a2 1
(* $Id$ *)
d33 9
@
