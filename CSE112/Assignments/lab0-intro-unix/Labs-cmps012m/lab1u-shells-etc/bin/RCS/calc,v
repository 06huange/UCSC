head	1.5;
access;
symbols;
locks;
comment	@# @;


1.5
date	2021.03.02.19.03.28;	author -;	state -;
branches;
next	1.4;

1.4
date	2020.11.26.13.17.33;	author -;	state -;
branches;
next	1.3;

1.3
date	2020.11.26.13.14.57;	author -;	state -;
branches;
next	1.2;

1.2
date	2019.11.06.23.16.23;	author -;	state -;
branches;
next	1.1;

1.1
date	2019.10.31.20.32.24;	author -;	state -;
branches;
next	;


desc
@@


1.5
log
@-
@
text
@#!/usr/bin/perl -w
# $Id: calc,v 1.4 2020-11-26 05:17:33-08 - - $
#
# NAME
#    calc
#
# SYNOPSIS
#    calc [exprs...]
#
# DESCRIPTION
#    Read each line, evaluate it as a Perl expression, and
#    print the value.  If @@ARGV is given, treat each element
#    of @@ARGV as a line.  Each input line or @@ARGV element is
#    a Perl expression, except that something matching the
#    pattern /\#(\d+)/ refers to the value of line $1 and a
#    match of /\#/ is the value of the most recent line.
#

use Math::Trig;
use constant PI => acos(-1);
use constant E => exp(1);

sub log2 ($) {log ($_[0]) / log (2)}
sub log10 ($) {log ($_[0]) / log (10)}
sub rad ($) {$_[0] * 2 * PI / 360} # of degrees
sub deg ($) {$_[0] / 2 / PI * 360} # of radians

$INPUT = @@ARGV ? 'shift @@ARGV' : '<>';

while ($calc = eval ($INPUT)) {
   $calc =~ s{\#(\d+)?}
             {"\$calc[" . (defined ($1) ? $1 : $#calc) . "]"}xge;
   push @@calc, $calc = eval ($calc) || 1e1000 / 1e1000;
   printf "#%d=\t%.15g\n%s", $#calc, $calc, $@@;
}

@


1.4
log
@-
@
text
@d2 1
a2 1
# $Id: calc,v 1.3 2020-11-26 05:14:57-08 - - $
d20 2
a21 2
use constant PI => 4 * atan2 (1, 1);
use constant E => exp (1);
@


1.3
log
@-
@
text
@d2 1
a2 1
# $Id: calc,v 1.2 2019-11-06 15:16:23-08 - - $
d30 5
a34 5
while ($CALC = eval ($INPUT)) {
   $CALC =~ s{\#(\d+)?}
             {"\$CALC[" . (defined ($1) ? $1 : $#CALC) . "]"}xge;
   push @@CALC, $CALC = eval ($CALC) || 1e1000 / 1e1000;
   printf "#%d=\t%.15g\n%s", $#CALC, $CALC, $@@;
@


1.2
log
@-
@
text
@d2 1
a2 1
# $Id: calc,v 1.1 2019-10-31 13:32:24-07 - - $
d25 2
a26 1
sub rad ($) {$_[0] * 2 * PI / 360}
@


1.1
log
@-
@
text
@d2 1
a2 1
# $Id: calc,v 1.3 2013-05-21 12:57:20-07 - - $
d19 4
a22 1
use constant pi => 4 * atan2 (1, 1);
@
