head	1.18;
access;
symbols;
locks;
comment	@# @;


1.18
date	2021.04.01.11.37.01;	author -;	state -;
branches;
next	1.17;

1.17
date	2021.04.01.11.34.33;	author -;	state -;
branches;
next	1.16;

1.16
date	2021.04.01.11.33.34;	author -;	state -;
branches;
next	1.15;

1.15
date	2021.04.01.11.32.12;	author -;	state -;
branches;
next	1.14;

1.14
date	2021.02.16.19.34.19;	author -;	state -;
branches;
next	1.13;

1.13
date	2021.01.06.00.12.10;	author -;	state -;
branches;
next	1.12;

1.12
date	2020.10.24.00.45.41;	author -;	state -;
branches;
next	1.11;

1.11
date	2020.10.22.23.08.32;	author -;	state -;
branches;
next	1.10;

1.10
date	2020.10.22.23.07.08;	author -;	state -;
branches;
next	1.9;

1.9
date	2020.08.21.00.05.17;	author -;	state -;
branches;
next	1.8;

1.8
date	2020.02.11.23.21.54;	author -;	state -;
branches;
next	1.7;

1.7
date	2020.02.11.23.21.11;	author -;	state -;
branches;
next	1.6;

1.6
date	2020.02.11.23.20.33;	author -;	state -;
branches;
next	1.5;

1.5
date	2020.01.23.01.53.47;	author -;	state -;
branches;
next	1.4;

1.4
date	2020.01.23.01.51.44;	author -;	state -;
branches;
next	1.3;

1.3
date	2020.01.23.01.07.01;	author -;	state -;
branches;
next	1.2;

1.2
date	2020.01.23.01.06.11;	author -;	state -;
branches;
next	1.1;

1.1
date	2019.10.31.20.32.24;	author -;	state -;
branches;
next	;


desc
@@


1.18
log
@-
@
text
@#!/usr/bin/perl
my $RCSID = '$Id: checksource,v 1.17 2021-04-01 04:34:33-07 - - $';
use strict;
use warnings;

$0 =~ s|^.*/||;

my $MANPAGE = <<__END_MAN_PAGE__;

NAME

   checksource - check source code for basic reasonable formatting

SYNOPSIS

   checksource [filename...]

DESCRIPTION

   Checks the input files for basic formatting sanity.  Prints
   complaints for strange looking files and a summary.  If no
   filenames are specified, prints out this man page.

OPERANDS

   Files to check for reasonable formatting.

COMPLAINTS

   The only invisible characters may be spaces and newlines,
   except for a Makefile, where some lines begin with a tab.
   Form feed is acceptable on a line by itself if used for
   formatting purposes.

   Printable characters are any ASCII printable character,
   including space, as determined by isprint(3), plus newline
   (\\n) and form feed (\\f).

   Each line must end in a newline.  The last character of the
   file must be a newline.  M*cr*\$*ft format files are not
   acceptable.  If you use emacs, be sure that your .emacs file
   has:  (setq require-final-newline t)

   You may remove carriage returns from your file with one of
   the following commands:

   . Perl:    perl -pi -e 's/\\r//' filename
   . vi:      :g/^V^M/s///

   No line may have more than 72 characters before the newline.
   Or:  with "cat -n | expand", lines including line numbers
   should not be longer than 80 characters.  Long lines should
   be wrapped in a sensible place, such as after a comma, and
   properly indented on the next line.

   Indent with 3 spaces for each level, and do not use tabs.

   In a Makefile, a tab is required as the first character on a
   shell command, but should never be used after a non-TAB
   character.

$RCSID

__END_MAN_PAGE__

my $complaints = 0;
my %messages;
my %ok_files;
$ok_files{$_} = 1 for @@ARGV;

sub error($$$){
   my ($filename, $linenr, $message) = @@_;
   delete $ok_files{$filename};
   push @@{$messages{$message}{$filename}}, $linenr;
   ++$complaints;
}

print $MANPAGE and exit unless @@ARGV;

for my $filename (@@ARGV) {
   unless (open FILE, "<$filename") {
      print STDERR "$0: $filename: $!\n";
      ++$complaints;
      next;
   }
   while (defined (my $line = <FILE>)) {

      # Check for missing newline
      error $filename, $., "missing newline at end of line"
            unless $line =~ s/\n$//;

      # Expand initial tabs in a Makefile.
      if ($filename =~ m|^(.*/)?Makefile$|i) {
         $line =~ s/^\t+/" " x (8 * length $&)/e
      }

      # Check for line length.
      my $maxlen = 72;
      for (my $max = $maxlen; (length $line) > $max; $max += $maxlen) {
         error $filename, $., "line length > $max characters";
      }

      # Check for non-ASCII chars in line.
      for my $char ($line =~ m/[^\n\f\x20-\x7E]/g) {
         my $ord = ord $char;
         my $message = sprintf "non-ASCII character \\x%02X", $ord;
         $message .= sprintf " = ^%c", $ord ^ 0x40 if $ord < 0x40;
         $message .= " (tab)" if $char eq "\t";
         $message .= " (carriage return)" if $char eq "\r";
         error $filename, $., $message;
      }

   }
   close FILE;
}

if ($complaints) {
   for my $message (sort keys %messages) {
      print STDERR "$0: $message\n";
      my $filehash = $messages{$message};
      for my $filename (sort keys %$filehash) {
         my @@rangenrs;
         my @@linenrs = @@{$filehash->{$filename}};
         my $errs = @@linenrs;
         my $complaint = "$filename: $errs errors: ";
         $complaint .= @@linenrs == 1 ? "line " : "lines ";
         while (@@linenrs) {
            my $end = 1;
            ++$end while $end < @@linenrs
                   and ($linenrs[$end - 1] == $linenrs[$end]
                     or $linenrs[$end - 1] + 1 == $linenrs[$end]);
            if ($end == 1) {
               push @@rangenrs, shift @@linenrs;
            }else {
               my @@splice = splice @@linenrs, 0, $end;
               push @@rangenrs, "$splice[0]--$splice[-1]";
            }
         }
         $complaint .= join ", ", @@rangenrs;
         if ($complaint =~ s/^(\S{65,}:)\s+/" " x 8/e) {
            print STDERR "$1\n";
         }
         while (length ($complaint) > 72) {
            $complaint =~ s/^.{9,72}\s+/" " x 8/e;
            my $segment = $&;
            print STDERR "$segment\n";
         }
         print STDERR "$complaint\n";
      }
   }
}

printf STDERR "$0: TOTAL COMPLAINTS: $complaints\n";
# print "$0: Files OK: ", join (" ", sort keys %ok_files), "\n"
#       if %ok_files;
exit 1 if $complaints;

@


1.17
log
@-
@
text
@d2 1
a2 1
my $RCSID = '$Id: checksource,v 1.16 2021-04-01 04:33:34-07 - - $';
d103 1
a103 1
      # Check for non_ASCII chars in line.
d106 1
a106 1
         my $message = sprintf "non_ASCII character \\x%02X", $ord;
@


1.16
log
@-
@
text
@d2 1
a2 1
my $RCSID = '$Id: checksource,v 1.15 2021-04-01 04:32:12-07 - - $';
d103 1
a103 1
      # Check for improper chars in line.
d106 1
a106 1
         my $message = sprintf "improper character \\x%02X", $ord;
@


1.15
log
@-
@
text
@d2 1
a2 1
my $RCSID = '$Id: checksource,v 1.14 2021-02-16 11:34:19-08 - - $';
d104 1
a104 1
      for my $char ($line =~ m/[^\n\f\x20-\x7E/g) {
@


1.14
log
@-
@
text
@d2 1
a2 1
my $RCSID = '$Id: checksource,v 1.13 2021-01-05 16:12:10-08 - - $';
d104 1
a104 1
      for my $char ($line =~ m/[^\n\f\x20-\x7E\xA1-\xFF]/g) {
@


1.13
log
@-
@
text
@d2 1
a2 1
my $RCSID = '$Id: checksource,v 1.12 2020-10-23 17:45:41-07 - - $';
d125 1
a125 1
         my $complaint = "   file \"$filename\": $errs errors: ";
d140 3
@


1.12
log
@-
@
text
@d2 1
a2 1
my $RCSID = '$Id: checksource,v 1.11 2020-10-22 16:08:32-07 - - $';
d37 1
a37 1
   (\n) and form feed (\f).
@


1.11
log
@-
@
text
@d2 1
a2 1
my $RCSID = '$Id: checksource,v 1.10 2020-10-22 16:07:08-07 - - $';
a48 1
   . shell:   dos2unix oldfilename >newfilename
@


1.10
log
@-
@
text
@d2 1
a2 1
my $RCSID = '$Id: checksource,v 1.9 2020-08-20 17:05:17-07 - - $';
d152 2
a153 2
print "$0: Files OK: ", join (" ", sort keys %ok_files), "\n"
      if %ok_files;
@


1.9
log
@-
@
text
@d2 1
a2 1
my $RCSID = '$Id: checksource,v 1.8 2020-02-11 15:21:54-08 - - $';
d69 2
d74 1
a148 2
   printf STDERR "$0: TOTAL COMPLAINTS: $complaints\n";
   exit 1;
d150 5
@


1.8
log
@-
@
text
@d2 1
a2 1
my $RCSID = '$Id: checksource,v 1.7 2020-02-11 15:21:11-08 - - $';
d52 1
a52 1
   Or:  with ``cat -n | expand'', lines including line numbers
@


1.7
log
@-
@
text
@d2 1
a2 1
my $RCSID = '$Id: checksource,v 1.6 2020-02-11 15:20:33-08 - - $';
d90 1
a90 1
      # Expand initial tab in a Makefile.
@


1.6
log
@-
@
text
@d2 1
a2 1
my $RCSID = '$Id: checksource,v 1.5 2020-01-22 17:53:47-08 - - $';
d91 1
a91 1
      if ($filename =~ m|^(.*/)?Makefile$|) {
@


1.5
log
@-
@
text
@d2 1
a2 1
my $RCSID = '$Id: checksource,v 1.4 2020-01-22 17:51:44-08 - - $';
d91 3
a93 1
      $line =~ s/^\t/" " x 8/ge if $filename =~ m|^(.*/)?Makefile$|;
@


1.4
log
@-
@
text
@d2 1
a2 1
my $RCSID = '$Id: checksource,v 1.3 2020-01-22 17:07:01-08 - - $';
d35 3
a37 3
   Printable characters are any ASCII printable character
   as determined by isprint(3), plus newline (\n) and
   form feed (\f).
@


1.3
log
@-
@
text
@d2 1
a2 1
my $RCSID = '$Id: checksource,v 1.1 2019-10-31 13:32:24-07 - - $';
d35 3
a37 4
   Printable characters are any ISO-Latin-1 characters in the
   range '!' to '~' and '¡' to 'ÿ' (\\u0021 to \\u007E and
   \\u00A1 to \\u00FF).  See:  http://www.unicode.org/charts/.
   ASCII files contain a subset of these characters.
@


1.2
log
@-
@
text
@d101 1
a101 1
      for my $char ($line =~ m/[^\n\f\x20-\x7E]/g) {
@


1.1
log
@-
@
text
@d2 1
a2 1
my $RCSID = '$Id: checksource,v 1.30 2019-04-18 13:09:27-07 - - $';
d101 1
a101 1
      for my $char ($line =~ m/[^\n\f\x20-\x7E\xA1-\xFF]/g) {
@
