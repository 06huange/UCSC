head	1.3;
access;
symbols;
locks;
comment	@# @;


1.3
date	2021.04.10.12.08.55;	author -;	state -;
branches;
next	1.2;

1.2
date	2021.04.10.12.04.25;	author -;	state -;
branches;
next	1.1;

1.1
date	2021.04.10.11.43.28;	author -;	state -;
branches;
next	;


desc
@@


1.3
log
@-
@
text
@#!/usr/bin/perl
# $Id: linelen.perl,v 1.2 2021-04-10 05:04:25-07 - - $

use strict;
use warnings;
$0 =~ s|.*/||;

sub key($) {
   my ($len) = @@_;
   my $modulus = 10;
   my $limit = 70;
   $len = int ($len / $modulus) * $modulus;
   if ($len < $limit) {
      return sprintf "%2d..%2d", $len, $len + $modulus - 1;
   }else {
      return "$limit..**";
   }
}

my %lengths;
$lengths{key $_} = 0 for 0..72;

my $linect = 0;
while (my $line = <>) {
   chomp $line;
   ++$lengths{key length $line};
   ++$linect;
}

print "count  length   cumulative\n";
my $total = 0;
for my $key (sort keys %lengths) {
   my $len = $lengths{$key};
   $total += $len;
   printf "%5d  %5s %5d = %3d%%\n",
          $len, $key, $total, $total / $linect * 100;
}

@


1.2
log
@-
@
text
@d2 1
a2 1
# $Id: linelen.perl,v 1.1 2021-04-10 04:43:28-07 - - $
d23 1
d27 1
d30 1
a30 1
print "count  length\n";
d35 2
a36 1
   printf "%5d  %5s\n", $len, $key;
a37 1
printf "%5d  lines\n", $total;
@


1.1
log
@-
@
text
@d2 1
a2 1
# $Id$
d4 14
a17 3
while (<>) {
   chomp;
   ++$linelen[length];
d20 6
a25 4
print "count length\n";
for $index (@@linelen) {
   printf %5d %5d\n" $linelen[$index], $index
          if $linelen[$index] > 0;
d27 10
@
