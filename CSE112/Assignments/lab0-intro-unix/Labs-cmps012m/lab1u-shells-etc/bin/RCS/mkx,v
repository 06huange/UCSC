head	1.5;
access;
symbols;
locks;
comment	@# @;


1.5
date	2020.08.21.00.15.32;	author -;	state -;
branches;
next	1.4;

1.4
date	2020.08.21.00.07.59;	author -;	state -;
branches;
next	1.3;

1.3
date	2020.08.20.20.39.15;	author -;	state -;
branches;
next	1.2;

1.2
date	2020.08.20.20.38.22;	author wmackey;	state Exp;
branches;
next	1.1;

1.1
date	2019.10.31.20.32.24;	author -;	state -;
branches;
next	;


desc
@@


1.5
log
@-
@
text
@#!/usr/bin/perl
# $Id: mkx,v 1.4 2020-08-20 17:07:59-07 - - $
#
# NAME
#    mkx - make simple experiment and cat prog and output
#
# SYNOPSIS
#    mkx prog...
#
# DESCRIPTION
#    Compile a simple program using mkc and then run it,
#    redirecting output into a file substituting the prog
#    suffix with lis.  Then make a pspdf of it.
#
# PURPOSE
#    Providing a printout of trivial small programs.
#

$0 =~ s|.*/||;
use strict;
use warnings;
use IPC::Open2;

print STDERR "Usage: $0 prog...\n" and exit 1 unless @@ARGV;

my $mark = ":" x 80 . "\n";
sub display($@@) {
   my ($file, @@msg) = @@_;
   print $file $mark, @@msg, $mark;
}

for my $prog (@@ARGV) {
   (my $base = $prog) =~ s/\.[^.]*$//;
   system "mkc $prog";
   exit if $?;
   my $lisfile = "$base.lis";
   open my $file, ">$lisfile" or warn "$0: $lisfile: $!" and next;
   display $file, "Source: $prog\n";
   print $file qx(cat -nv $prog);
   display $file, "Output: ./$base 2>&1\n";
   my $output = qx(./$base 2>&1);
   my $status = $?;
   if (my $pid = open2 (my $child_out, my $child_in, "cat -nv 2>&1")) {
      print $child_in $output;
      close $child_in;
      my @@cat_nv = <$child_out>;
      print $file @@cat_nv;
      print $file $mark;
      print $file qx(pstatus $status);
   }else {
      warn "$0: open2: $!";
   }
   close $file;
   system "cat $lisfile";
   system "mkpspdf -c $base.ps $lisfile";
}

@


1.4
log
@-
@
text
@d2 1
a2 1
# $Id: mkx,v 1.3 2020-08-20 13:39:15-07 - - $
d24 1
a24 1
print STDERR "Usage: $0 prog..." and exit 1 unless @@ARGV;
d39 1
a39 1
   print $file $(cat -nv $prog);
d41 1
a41 1
   my $output = $(./$base 2>&1);
d49 1
a49 1
      print $file $(pstatus $status);
@


1.3
log
@-
@
text
@d2 1
a2 1
# $Id: mkx,v 1.2 2020-08-20 13:38:22-07 wmackey Exp $
d39 1
a39 1
   print $file `cat -nv $prog`;
d41 1
a41 1
   my $output = `./$base 2>&1`;
d49 1
a49 1
      print $file `pstatus $status`;
@


1.2
log
@-
@
text
@d2 1
a2 1
# $Id: mkx,v 1.1 2019-10-31 13:32:24-07 - - $
@


1.1
log
@-
@
text
@d2 1
a2 1
# $Id: mkx,v 1.13 2013-10-10 12:17:00-07 - - $
@
